PARAMETRES PAR DEFAUT
    public void initSpeciesData() {
        TypeEspece rabbit = new TypeEspece("Rabbit", 10, 0, 1.2, Color.WHITE);
        species.add(rabbit);
        TypeEspece deers = new TypeEspece("Deers", 10, 0, 1.9, Color.BLUEVIOLET);
        species.add(deers);
        TypeEspece bobcat = new TypeEspece("Bobcat", 4, 0, 0.4, Color.RED);
        bobcat.addInteraction(rabbit, new Interaction(60, InterType.MANGE));
        bobcat.addInteraction(deers, new Interaction(75, InterType.MANGE));
        deers.addInteraction(bobcat, new Interaction(70, InterType.MANGE));
        species.add(bobcat);

map: 40 x 40


## sim_20.5
        TypeEspece a = new TypeEspece("A", 80, 0, 1.1, Color.SALMON);
        TypeEspece b = new TypeEspece("B", 80, 0, 1.1, Color.THISTLE);
        TypeEspece c = new TypeEspece("C", 80, 0, 1.1, Color.TAN);
        TypeEspece d = new TypeEspece("D", 80, 0, 1.1, Color.MINTCREAM);
        TypeEspece e = new TypeEspece("E", 80, 0, 1.1, Color.DARKKHAKI);
        TypeEspece f = new TypeEspece("F", 80, 0, 1.1, Color.FIREBRICK);
        TypeEspece g = new TypeEspece("G", 80, 0, 1.1, Color.GAINSBORO);
        TypeEspece h = new TypeEspece("H", 80, 0, 1.1, Color.ANTIQUEWHITE);
        TypeEspece i = new TypeEspece("I", 80, 0, 1.1, Color.LIGHTGOLDENRODYELLOW);
        TypeEspece j = new TypeEspece("J", 80, 0, 1.1, Color.ALICEBLUE);
        TypeEspece k = new TypeEspece("K", 80, 0, 1.1, Color.BLANCHEDALMOND);
        TypeEspece l = new TypeEspece("L", 80, 0, 1.1, Color.BURLYWOOD);
        TypeEspece m = new TypeEspece("M", 80, 0, 1.1, Color.BISQUE);
        TypeEspece n = new TypeEspece("N", 80, 0, 1.1, Color.CRIMSON);
        TypeEspece o = new TypeEspece("O", 80, 0, 1.1, Color.CHARTREUSE);
        TypeEspece p = new TypeEspece("P", 80, 0, 1.1, Color.DARKGOLDENROD);

       	a.addInteraction(m, new Interaction(80, InterType.MANGE));
       	a.addInteraction(n, new Interaction(80, InterType.MANGE));
       	a.addInteraction(o, new Interaction(80, InterType.MANGE));
       	a.addInteraction(p, new Interaction(80, InterType.MANGE));

        b.addInteraction(n, new Interaction(80, InterType.MANGE));
        b.addInteraction(o, new Interaction(80, InterType.MANGE));
        b.addInteraction(p, new Interaction(80, InterType.MANGE));
        b.addInteraction(a, new Interaction(80, InterType.MANGE));

        c.addInteraction(o, new Interaction(80, InterType.MANGE));
        c.addInteraction(p, new Interaction(80, InterType.MANGE));
        c.addInteraction(a, new Interaction(80, InterType.MANGE));
        c.addInteraction(b, new Interaction(80, InterType.MANGE));

        d.addInteraction(p, new Interaction(80, InterType.MANGE));
        d.addInteraction(a, new Interaction(80, InterType.MANGE));
        d.addInteraction(b, new Interaction(80, InterType.MANGE));
        d.addInteraction(c, new Interaction(80, InterType.MANGE));

        e.addInteraction(a, new Interaction(80, InterType.MANGE));
        e.addInteraction(b, new Interaction(80, InterType.MANGE));
        e.addInteraction(c, new Interaction(80, InterType.MANGE));
        e.addInteraction(d, new Interaction(80, InterType.MANGE));

        f.addInteraction(b, new Interaction(80, InterType.MANGE));
        f.addInteraction(c, new Interaction(80, InterType.MANGE));
        f.addInteraction(d, new Interaction(80, InterType.MANGE));
        f.addInteraction(e, new Interaction(80, InterType.MANGE));

        g.addInteraction(d, new Interaction(80, InterType.MANGE));
        g.addInteraction(e, new Interaction(80, InterType.MANGE));
        g.addInteraction(g, new Interaction(80, InterType.MANGE));
        g.addInteraction(f, new Interaction(80, InterType.MANGE));

        h.addInteraction(d, new Interaction(80, InterType.MANGE));
        h.addInteraction(e, new Interaction(80, InterType.MANGE));
        h.addInteraction(f, new Interaction(80, InterType.MANGE));
        h.addInteraction(g, new Interaction(80, InterType.MANGE));

       	i.addInteraction(e, new Interaction(80, InterType.MANGE));
       	i.addInteraction(f, new Interaction(80, InterType.MANGE));
       	i.addInteraction(g, new Interaction(80, InterType.MANGE));
       	i.addInteraction(h, new Interaction(80, InterType.MANGE));

        j.addInteraction(f, new Interaction(80, InterType.MANGE));
        j.addInteraction(g, new Interaction(80, InterType.MANGE));
        j.addInteraction(h, new Interaction(80, InterType.MANGE));
        j.addInteraction(i, new Interaction(80, InterType.MANGE));

        k.addInteraction(g, new Interaction(80, InterType.MANGE));
        k.addInteraction(h, new Interaction(80, InterType.MANGE));
        k.addInteraction(i, new Interaction(80, InterType.MANGE));
        k.addInteraction(j, new Interaction(80, InterType.MANGE));

        l.addInteraction(h, new Interaction(80, InterType.MANGE));
        l.addInteraction(i, new Interaction(80, InterType.MANGE));
        l.addInteraction(j, new Interaction(80, InterType.MANGE));
        l.addInteraction(k, new Interaction(80, InterType.MANGE));

        m.addInteraction(i, new Interaction(80, InterType.MANGE));
        m.addInteraction(j, new Interaction(80, InterType.MANGE));
        m.addInteraction(k, new Interaction(80, InterType.MANGE));
        m.addInteraction(l, new Interaction(80, InterType.MANGE));

        n.addInteraction(j, new Interaction(80, InterType.MANGE));
        n.addInteraction(k, new Interaction(80, InterType.MANGE));
        n.addInteraction(l, new Interaction(80, InterType.MANGE));
        n.addInteraction(m, new Interaction(80, InterType.MANGE));

        o.addInteraction(k, new Interaction(80, InterType.MANGE));
        o.addInteraction(l, new Interaction(80, InterType.MANGE));
        o.addInteraction(m, new Interaction(80, InterType.MANGE));
        o.addInteraction(n, new Interaction(80, InterType.MANGE));

        p.addInteraction(l, new Interaction(80, InterType.MANGE));
        p.addInteraction(m, new Interaction(80, InterType.MANGE));
        p.addInteraction(n, new Interaction(80, InterType.MANGE));
        p.addInteraction(o, new Interaction(80, InterType.MANGE));

        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);
        species.add(i);
        species.add(j);
        species.add(k);
        species.add(l);
        species.add(m);
        species.add(n);
        species.add(o);
        species.add(p);

## sim_20.4
        TypeEspece a = new TypeEspece("A", 40, 0, 1.05, Color.SALMON);
        TypeEspece b = new TypeEspece("B", 40, 0, 0.95, Color.THISTLE);
        TypeEspece c = new TypeEspece("C", 30, 0, 0.9, Color.TAN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.01, Color.MINTCREAM);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.05, Color.DARKKHAKI);
        TypeEspece f = new TypeEspece("F", 40, 0, 0.95, Color.FIREBRICK);
        TypeEspece g = new TypeEspece("G", 30, 0, 0.9, Color.GAINSBORO);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.01, Color.ANTIQUEWHITE);
        TypeEspece i = new TypeEspece("I", 40, 0, 1.05, Color.LIGHTGOLDENRODYELLOW);
        TypeEspece j = new TypeEspece("J", 40, 0, 0.95, Color.ALICEBLUE);
        TypeEspece k = new TypeEspece("K", 30, 0, 0.9, Color.BLANCHEDALMOND);
        TypeEspece l = new TypeEspece("L", 40, 0, 1.01, Color.BURLYWOOD);
        TypeEspece m = new TypeEspece("M", 40, 0, 1.05, Color.BISQUE);
        TypeEspece n = new TypeEspece("N", 40, 0, 0.95, Color.CRIMSON);
        TypeEspece o = new TypeEspece("O", 30, 0, 0.9, Color.CHARTREUSE);
        TypeEspece p = new TypeEspece("P", 40, 0, 1.01, Color.DARKGOLDENROD);
       	a.addInteraction(p, new Interaction(70, InterType.MANGE));

        b.addInteraction(a, new Interaction(50, InterType.MANGE));
        b.addInteraction(p, new Interaction(40, InterType.MANGE));

        c.addInteraction(a, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(25, InterType.MANGE));
        c.addInteraction(p, new Interaction(20, InterType.MANGE));

        d.addInteraction(p, new Interaction(30, InterType.MANGE));
        d.addInteraction(a, new Interaction(40, InterType.MANGE));
        d.addInteraction(b, new Interaction(50, InterType.MANGE));
        d.addInteraction(c, new Interaction(60, InterType.MANGE));

        e.addInteraction(d, new Interaction(70, InterType.MANGE));

        f.addInteraction(d, new Interaction(50, InterType.MANGE));
        f.addInteraction(e, new Interaction(40, InterType.MANGE));

        g.addInteraction(d, new Interaction(30, InterType.MANGE));
        g.addInteraction(e, new Interaction(25, InterType.MANGE));
        g.addInteraction(f, new Interaction(20, InterType.MANGE));

        h.addInteraction(d, new Interaction(30, InterType.MANGE));
        h.addInteraction(e, new Interaction(40, InterType.MANGE));
        h.addInteraction(f, new Interaction(50, InterType.MANGE));
        h.addInteraction(g, new Interaction(60, InterType.MANGE));

       	i.addInteraction(h, new Interaction(70, InterType.MANGE));

        j.addInteraction(h, new Interaction(50, InterType.MANGE));
        j.addInteraction(i, new Interaction(40, InterType.MANGE));

        k.addInteraction(h, new Interaction(30, InterType.MANGE));
        k.addInteraction(i, new Interaction(25, InterType.MANGE));
        k.addInteraction(j, new Interaction(20, InterType.MANGE));

        l.addInteraction(h, new Interaction(30, InterType.MANGE));
        l.addInteraction(i, new Interaction(40, InterType.MANGE));
        l.addInteraction(j, new Interaction(50, InterType.MANGE));
        l.addInteraction(k, new Interaction(60, InterType.MANGE));

        m.addInteraction(l, new Interaction(70, InterType.MANGE));

        n.addInteraction(l, new Interaction(50, InterType.MANGE));
        n.addInteraction(m, new Interaction(40, InterType.MANGE));

        o.addInteraction(l, new Interaction(30, InterType.MANGE));
        o.addInteraction(m, new Interaction(25, InterType.MANGE));
        o.addInteraction(n, new Interaction(20, InterType.MANGE));

        p.addInteraction(l, new Interaction(30, InterType.MANGE));
        p.addInteraction(m, new Interaction(40, InterType.MANGE));
        p.addInteraction(n, new Interaction(50, InterType.MANGE));
        p.addInteraction(o, new Interaction(60, InterType.MANGE));

        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);
        species.add(i);
        species.add(j);
        species.add(k);
        species.add(l);
        species.add(m);
        species.add(n);
        species.add(o);
        species.add(p);

## sim_20.3
        TypeEspece a = new TypeEspece("A", 40, 0, 1.05, Color.SALMON);
        TypeEspece b = new TypeEspece("B", 40, 0, 0.95, Color.THISTLE);
        TypeEspece c = new TypeEspece("C", 30, 0, 0.9, Color.TAN);
        TypeEspece d = new TypeEspece("D", 40, 0, 0.95, Color.MINTCREAM);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.05, Color.DARKKHAKI);
        TypeEspece f = new TypeEspece("F", 40, 0, 0.95, Color.FIREBRICK);
        TypeEspece g = new TypeEspece("G", 30, 0, 0.9, Color.GAINSBORO);
        TypeEspece h = new TypeEspece("H", 40, 0, 0.95, Color.ANTIQUEWHITE);
        TypeEspece i = new TypeEspece("I", 40, 0, 1.05, Color.LIGHTGOLDENRODYELLOW);
        TypeEspece j = new TypeEspece("J", 40, 0, 0.95, Color.ALICEBLUE);
        TypeEspece k = new TypeEspece("K", 30, 0, 0.9, Color.BLANCHEDALMOND);
        TypeEspece l = new TypeEspece("L", 40, 0, 0.95, Color.BURLYWOOD);
        TypeEspece m = new TypeEspece("M", 40, 0, 1.05, Color.BISQUE);
        TypeEspece n = new TypeEspece("N", 40, 0, 0.95, Color.CRIMSON);
        TypeEspece o = new TypeEspece("O", 30, 0, 0.9, Color.CHARTREUSE);
        TypeEspece p = new TypeEspece("P", 40, 0, 0.95, Color.DARKGOLDENROD);
       	a.addInteraction(p, new Interaction(70, InterType.MANGE));

        b.addInteraction(a, new Interaction(50, InterType.MANGE));
        b.addInteraction(p, new Interaction(40, InterType.MANGE));

        c.addInteraction(a, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(25, InterType.MANGE));
        c.addInteraction(p, new Interaction(20, InterType.MANGE));

        d.addInteraction(p, new Interaction(20, InterType.MANGE));
        d.addInteraction(a, new Interaction(30, InterType.MANGE));
        d.addInteraction(b, new Interaction(40, InterType.MANGE));
        d.addInteraction(c, new Interaction(50, InterType.MANGE));

        e.addInteraction(d, new Interaction(70, InterType.MANGE));

        f.addInteraction(d, new Interaction(50, InterType.MANGE));
        f.addInteraction(e, new Interaction(40, InterType.MANGE));

        g.addInteraction(d, new Interaction(30, InterType.MANGE));
        g.addInteraction(e, new Interaction(25, InterType.MANGE));
        g.addInteraction(f, new Interaction(20, InterType.MANGE));

        h.addInteraction(d, new Interaction(20, InterType.MANGE));
        h.addInteraction(e, new Interaction(30, InterType.MANGE));
        h.addInteraction(f, new Interaction(40, InterType.MANGE));
        h.addInteraction(g, new Interaction(50, InterType.MANGE));

       	i.addInteraction(h, new Interaction(70, InterType.MANGE));

        j.addInteraction(h, new Interaction(50, InterType.MANGE));
        j.addInteraction(i, new Interaction(40, InterType.MANGE));

        k.addInteraction(h, new Interaction(30, InterType.MANGE));
        k.addInteraction(i, new Interaction(25, InterType.MANGE));
        k.addInteraction(j, new Interaction(20, InterType.MANGE));

        l.addInteraction(h, new Interaction(20, InterType.MANGE));
        l.addInteraction(i, new Interaction(30, InterType.MANGE));
        l.addInteraction(j, new Interaction(40, InterType.MANGE));
        l.addInteraction(k, new Interaction(50, InterType.MANGE));

        m.addInteraction(l, new Interaction(70, InterType.MANGE));

        n.addInteraction(l, new Interaction(50, InterType.MANGE));
        n.addInteraction(m, new Interaction(40, InterType.MANGE));

        o.addInteraction(l, new Interaction(30, InterType.MANGE));
        o.addInteraction(m, new Interaction(25, InterType.MANGE));
        o.addInteraction(n, new Interaction(20, InterType.MANGE));

        p.addInteraction(l, new Interaction(20, InterType.MANGE));
        p.addInteraction(m, new Interaction(30, InterType.MANGE));
        p.addInteraction(n, new Interaction(40, InterType.MANGE));
        p.addInteraction(o, new Interaction(50, InterType.MANGE));

        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);
        species.add(i);
        species.add(j);
        species.add(k);
        species.add(l);
        species.add(m);
        species.add(n);
        species.add(o);
        species.add(p);


## sim_20.2
        TypeEspece a = new TypeEspece("A", 40, 0, 1.2, Color.SALMON);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.THISTLE);
        TypeEspece c = new TypeEspece("C", 30, 0, 0.9, Color.TAN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.2, Color.MINTCREAM);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.2, Color.DARKKHAKI);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.FIREBRICK);
        TypeEspece g = new TypeEspece("G", 30, 0, 0.9, Color.GAINSBORO);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.2, Color.ANTIQUEWHITE);
        TypeEspece i = new TypeEspece("I", 40, 0, 1.2, Color.LIGHTGOLDENRODYELLOW);
        TypeEspece j = new TypeEspece("J", 40, 0, 1.1, Color.ALICEBLUE);
        TypeEspece k = new TypeEspece("K", 30, 0, 0.9, Color.BLANCHEDALMOND);
        TypeEspece l = new TypeEspece("L", 40, 0, 1.2, Color.BURLYWOOD);
        TypeEspece m = new TypeEspece("M", 40, 0, 1.2, Color.BISQUE);
        TypeEspece n = new TypeEspece("N", 40, 0, 1.1, Color.CRIMSON);
        TypeEspece o = new TypeEspece("O", 30, 0, 0.9, Color.CHARTREUSE);
        TypeEspece p = new TypeEspece("P", 40, 0, 1.2, Color.DARKGOLDENROD);

       	a.addInteraction(p, new Interaction(100, InterType.MANGE));

        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        b.addInteraction(p, new Interaction(70, InterType.MANGE));

        c.addInteraction(a, new Interaction(60, InterType.MANGE));
        c.addInteraction(b, new Interaction(50, InterType.MANGE));
        c.addInteraction(p, new Interaction(40, InterType.MANGE));

        d.addInteraction(p, new Interaction(50, InterType.MANGE));
        d.addInteraction(a, new Interaction(60, InterType.MANGE));
        d.addInteraction(b, new Interaction(70, InterType.MANGE));
        d.addInteraction(c, new Interaction(80, InterType.MANGE));

        e.addInteraction(d, new Interaction(100, InterType.MANGE));

        f.addInteraction(d, new Interaction(80, InterType.MANGE));
        f.addInteraction(e, new Interaction(70, InterType.MANGE));

        g.addInteraction(d, new Interaction(60, InterType.MANGE));
        g.addInteraction(e, new Interaction(50, InterType.MANGE));
        g.addInteraction(f, new Interaction(40, InterType.MANGE));

        h.addInteraction(d, new Interaction(50, InterType.MANGE));
        h.addInteraction(e, new Interaction(60, InterType.MANGE));
        h.addInteraction(f, new Interaction(70, InterType.MANGE));
        h.addInteraction(g, new Interaction(80, InterType.MANGE));

       	i.addInteraction(h, new Interaction(100, InterType.MANGE));

        j.addInteraction(h, new Interaction(80, InterType.MANGE));
        j.addInteraction(i, new Interaction(70, InterType.MANGE));

        k.addInteraction(h, new Interaction(60, InterType.MANGE));
        k.addInteraction(i, new Interaction(50, InterType.MANGE));
        k.addInteraction(j, new Interaction(40, InterType.MANGE));

        l.addInteraction(h, new Interaction(50, InterType.MANGE));
        l.addInteraction(i, new Interaction(60, InterType.MANGE));
        l.addInteraction(j, new Interaction(70, InterType.MANGE));
        l.addInteraction(k, new Interaction(80, InterType.MANGE));

        m.addInteraction(l, new Interaction(100, InterType.MANGE));

        n.addInteraction(l, new Interaction(80, InterType.MANGE));
        n.addInteraction(m, new Interaction(70, InterType.MANGE));

        o.addInteraction(l, new Interaction(60, InterType.MANGE));
        o.addInteraction(m, new Interaction(50, InterType.MANGE));
        o.addInteraction(n, new Interaction(40, InterType.MANGE));

        p.addInteraction(l, new Interaction(50, InterType.MANGE));
        p.addInteraction(m, new Interaction(60, InterType.MANGE));
        p.addInteraction(n, new Interaction(70, InterType.MANGE));
        p.addInteraction(o, new Interaction(80, InterType.MANGE));

        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);
        species.add(i);
        species.add(j);
        species.add(k);
        species.add(l);
        species.add(m);
        species.add(n);
        species.add(o);
        species.add(p);


## sim_20.1
trop saturé

        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.SALMON);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.THISTLE);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.TAN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.MINTCREAM);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.DARKKHAKI);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.FIREBRICK);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.GAINSBORO);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.ANTIQUEWHITE);
        TypeEspece i = new TypeEspece("I", 40, 0, 1.1, Color.LIGHTGOLDENRODYELLOW);
        TypeEspece j = new TypeEspece("J", 40, 0, 1.1, Color.ALICEBLUE);
        TypeEspece k = new TypeEspece("K", 40, 0, 1.1, Color.BLANCHEDALMOND);
        TypeEspece l = new TypeEspece("L", 40, 0, 1.1, Color.BURLYWOOD);
        TypeEspece m = new TypeEspece("M", 40, 0, 1.1, Color.BISQUE);
        TypeEspece n = new TypeEspece("N", 40, 0, 1.1, Color.CRIMSON);
        TypeEspece o = new TypeEspece("O", 40, 0, 1.1, Color.CHARTREUSE);
        TypeEspece p = new TypeEspece("P", 40, 0, 1.1, Color.DARKGOLDENROD);
       	a.addInteraction(p, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
       	i.addInteraction(h, new Interaction(30, InterType.MANGE));
        j.addInteraction(i, new Interaction(30, InterType.MANGE));
        k.addInteraction(j, new Interaction(30, InterType.MANGE));
        l.addInteraction(k, new Interaction(30, InterType.MANGE));
        m.addInteraction(l, new Interaction(30, InterType.MANGE));
        n.addInteraction(m, new Interaction(30, InterType.MANGE));
        o.addInteraction(n, new Interaction(30, InterType.MANGE));
        p.addInteraction(o, new Interaction(30, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);
        species.add(i);
        species.add(j);
        species.add(k);
        species.add(l);
        species.add(m);
        species.add(n);
        species.add(o);
        species.add(p);


## BILANS DE QUELQUES SIMULATIONS INTERESSANTES

à trois:
	un périodique: 14.4
	un fight: 14.2

chaîne alimentaire:
	exemples tamponés: 15.3.1 : nécessiter de mettre >1
	victoire de apex: 15.4
	apex en négatif: 17.1 normal, 17.2 avec gradient et mort par trou de chaîne, 17.3 gradient moins fort

ronde
	stagnation 1 sur 2: influence de la taille de la carte: orgue: 15.6=18.1, 15.7=18.2
	ronde à 1 en proba alternées en evolrate alternées: 18.6
	ronde à 2: 15.8



## sim_18.x

## sim_18.6
ronde à 1 en proba alternées en evolrate alternées

    	TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 0.9, Color.BLUEVIOLET);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        TypeEspece d = new TypeEspece("D", 40, 0, 0.9, Color.RED);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        TypeEspece f = new TypeEspece("F", 40, 0, 0.9, Color.BLUE);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        TypeEspece h = new TypeEspece("H", 40, 0, 0.9, Color.YELLOW);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);

## sim_18.5
ronde à 2 en probas alternées en evolrate alternées

        TypeEspece a = new TypeEspece("A", 50, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 0.9, Color.BLUEVIOLET);
        TypeEspece h = new TypeEspece("H", 50, 0, 1.1, Color.YELLOW);
        TypeEspece g = new TypeEspece("G", 40, 0, 0.9, Color.PINK);
        TypeEspece f = new TypeEspece("F", 50, 0, 1.1, Color.BLUE);
        TypeEspece e = new TypeEspece("E", 40, 0, 0.9, Color.GREEN);
        TypeEspece d = new TypeEspece("D", 50, 0, 1.1, Color.RED);
        TypeEspece c = new TypeEspece("C", 40, 0, 0.9, Color.ORANGE);
       	a.addInteraction(h, new Interaction(80, InterType.MANGE));
        a.addInteraction(g, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        b.addInteraction(h, new Interaction(80, InterType.MANGE));
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        c.addInteraction(a, new Interaction(80, InterType.MANGE));
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        d.addInteraction(b, new Interaction(30, InterType.MANGE));
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        e.addInteraction(c, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        f.addInteraction(d, new Interaction(80, InterType.MANGE));
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        g.addInteraction(e, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        h.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);



## sim_18.4
ronde à 2 en proba alternées

        TypeEspece a = new TypeEspece("A", 50, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        TypeEspece h = new TypeEspece("H", 50, 0, 1.1, Color.YELLOW);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        TypeEspece f = new TypeEspece("F", 50, 0, 1.1, Color.BLUE);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        TypeEspece d = new TypeEspece("D", 50, 0, 1.1, Color.RED);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
       	a.addInteraction(h, new Interaction(80, InterType.MANGE));
        a.addInteraction(g, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        b.addInteraction(h, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        c.addInteraction(a, new Interaction(30, InterType.MANGE));
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        d.addInteraction(b, new Interaction(30, InterType.MANGE));
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        e.addInteraction(c, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        f.addInteraction(d, new Interaction(30, InterType.MANGE));
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        g.addInteraction(e, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        h.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);

## sim_18.3
ronde à deux tout à l'identique

    TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
       	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        a.addInteraction(g, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        b.addInteraction(h, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        c.addInteraction(a, new Interaction(30, InterType.MANGE));
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        d.addInteraction(b, new Interaction(30, InterType.MANGE));
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        e.addInteraction(c, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        f.addInteraction(d, new Interaction(30, InterType.MANGE));
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        g.addInteraction(e, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        h.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);

## sim_18.2
        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        species.add(a);


## sim_18.1
    TypeEspece a = new TypeEspece("A", 40, 0, 1.01, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.01, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.01, Color.ORANGE);
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.01, Color.RED);
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.01, Color.GREEN);
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.01, Color.BLUE);
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.01, Color.PINK);
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.01, Color.YELLOW);
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        species.add(a);


## sim 17.x

sim_17.3
        TypeEspece a = new TypeEspece("A", 100, 0, 1.20, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 90, 0, 1.15, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 80, 0, 1.10, Color.ORANGE);
        c.addInteraction(b, new Interaction(75, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 70, 0, 1.05, Color.RED);
        d.addInteraction(c, new Interaction(70, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 60, 0, 1.00, Color.GREEN);
        e.addInteraction(d, new Interaction(65, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 50, 0, 0.95, Color.BLUE);
        f.addInteraction(e, new Interaction(50, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 0.90, Color.PINK);
        g.addInteraction(f, new Interaction(45, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 30, 0, 0.85, Color.YELLOW);
        h.addInteraction(g, new Interaction(40, InterType.MANGE));
        species.add(h);

sim_17.2

        TypeEspece a = new TypeEspece("A", 100, 0, 1.20, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 90, 0, 1.15, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(100, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 180, 0, 1.10, Color.ORANGE);		// unconscient error on 180
        c.addInteraction(b, new Interaction(90, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 70, 0, 1.05, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 60, 0, 1.00, Color.GREEN);
        e.addInteraction(d, new Interaction(70, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 50, 0, 0.95, Color.BLUE);
        f.addInteraction(e, new Interaction(60, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 0.90, Color.PINK);
        g.addInteraction(f, new Interaction(50, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 30, 0, 0.85, Color.YELLOW);
        h.addInteraction(g, new Interaction(40, InterType.MANGE));
        species.add(h);

100 x 100



sim_17.1
chaîne alimentaire avec apex predator avec evolvrate negatif

        TypeEspece a = new TypeEspece("A", 60, 0, 1.1, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 0.7, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);

40 x 40

## sim 16.x combat de tours

## sim 16.1

        TypeEspece a = new TypeEspece("baptiste", 40, 0, 1.1, Color.WHITE);
        species.add(b);
        TypeEspece b = new TypeEspece("elias", 40, 0, 1.1, Color.BLUEVIOLET);
        species.add(a);
        TypeEspece c = new TypeEspece("crystal", 40, 0, 1.1, Color.ORANGE);
        species.add(c);
        TypeEspece d = new TypeEspece("mathieu", 40, 0, 1.1, Color.RED);
        species.add(d);
        TypeEspece e = new TypeEspece("romain", 40, 0, 1, Color.GREEN);
        e.addInteraction(a, new Interaction(30, InterType.MANGE));
        e.addInteraction(b, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("nepy", 40, 0, 1, Color.BLUE);
        f.addInteraction(c, new Interaction(30, InterType.MANGE));
        f.addInteraction(d, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);


### sim 15.x: tentative de modelisation d'une chaîne alimentaire simple
p1
↓
p2
↓
...
↓
p8

## sim_15.9 essai d'un orgue de l'enfer avec ronde à une ou deux et 80%
# ronde à deux
        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
       	a.addInteraction(h, new Interaction(80, InterType.MANGE));
        a.addInteraction(g, new Interaction(80, InterType.MANGE));
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        b.addInteraction(h, new Interaction(80, InterType.MANGE));
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        c.addInteraction(a, new Interaction(80, InterType.MANGE));
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        d.addInteraction(b, new Interaction(80, InterType.MANGE));
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        e.addInteraction(c, new Interaction(80, InterType.MANGE));
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        f.addInteraction(d, new Interaction(80, InterType.MANGE));
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        g.addInteraction(e, new Interaction(80, InterType.MANGE));
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        h.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);

# ronde à une
        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(70, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(70, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(70, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(70, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(70, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(70, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        h.addInteraction(g, new Interaction(70, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(70, InterType.MANGE));
        species.add(a);


## sim_15.8: Double Ronde !
résulats bizarres.
Après relancement, beaucoup d'erreurs: voir sim_15.2.log.txt pour les détails

Ah, comportement intéressant sur l'imprécision du programme: au début, tant qu'il y a de la place, croissance pour toutes les espèces (parce qu'elles ne se mangent pas entre elles et/ou ont assez de place ?)
Après, cycle de croissance très rapide, une espèce fait un énorme pic, mangée par une qui en fait un plus énorme encore, mangée... ... jusqu'à ce que la map soit saturée et que la situation n'évolue plus parce que plus de déplacements
→ limite du programme qui n'a pas de catastrophes, et d'un monde "fini", et dans lequel les espèces n'ont pas du tout des contraintes des comportements d'auto-régulation, ce qui est le cas pour une grande partie des espèces existant réellement (sauf peut être pour les humains..).

        TypeEspece a = new TypeEspece("A", 40, 0, 1.01, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.01, Color.BLUEVIOLET);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.01, Color.YELLOW);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.01, Color.PINK);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.01, Color.BLUE);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.01, Color.GREEN);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.01, Color.RED);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.01, Color.ORANGE);
       	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        a.addInteraction(g, new Interaction(30, InterType.MANGE));
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        b.addInteraction(h, new Interaction(30, InterType.MANGE));
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        c.addInteraction(a, new Interaction(30, InterType.MANGE));
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        d.addInteraction(b, new Interaction(30, InterType.MANGE));
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        e.addInteraction(c, new Interaction(30, InterType.MANGE));
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        f.addInteraction(d, new Interaction(30, InterType.MANGE));
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        g.addInteraction(e, new Interaction(30, InterType.MANGE));
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        h.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(a);
        species.add(b);
        species.add(c);
        species.add(d);
        species.add(e);
        species.add(f);
        species.add(g);
        species.add(h);



map.   40 x 40 ou 100 x 100


## sim_15.7.2: corection du 80% de c
Résultats plus changeants, mais globalement équivalents.

        TypeEspece a = new TypeEspece("A", 40, 0, 1.01, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.01, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.01, Color.ORANGE);
        c.addInteraction(b, new Interaction(30, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.01, Color.RED);
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.01, Color.GREEN);
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.01, Color.BLUE);
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.01, Color.PINK);
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.01, Color.YELLOW);
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        species.add(a);

map: 40 x 40


## sim_15.7
Essai avec une plus grande carte.
Résultat pas très déconcertant: A, C, E, G, gagnent sur le reste, n'ayant pas de prédation entre eux. Si le graphe est déjà clair sur c̨a, la map bien sûr saturée due au tôt d'accroissement positif, la table est pour une fois très claire: une colonne sur deux a un effectif conséquent.

La situation semble assez reproductible (voir 15.7.1). Mais en regardant la table au tour 1, il peut être remarqué que le tour 1 n'est pas le tour de départ, car les taux sont déjà différents de ceux rentrés comme initiaux. En fait, ce serait juste le tour 0 qui est non marqué.


NOTE APRES COUP: Je ne m'étais pas rendu compte que seul C avait une interraction de 80% avec B tandis que tous les autres étaient en 30%, ce qui déséquilibrait.

        TypeEspece a = new TypeEspece("A", 40, 0, 1.01, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.01, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.01, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.01, Color.RED);
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.01, Color.GREEN);
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.01, Color.BLUE);
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.01, Color.PINK);
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.01, Color.YELLOW);
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        species.add(a);

map. 100 x 100



## sim_15.6
Des trucs bizarres.
la carte est saturée, ce qui fait que les seules interractions possibles sont quand deux zones (oui zones, car les bêtes ne se déplacent plus tellement) dont l'une MANGE l'autre se rencontrent, ce qui fait que l'une se fait recouvrir. Et le cycle continue et ne semble jamais en venir à renverser la situation sur l'ensemble de la carte, car en s'étendant, une zone se met en contact avec sa proie, ce qui reboucle

        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(30, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(30, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(30, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(30, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(30, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        h.addInteraction(g, new Interaction(30, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(30, InterType.MANGE));
        species.add(a);

map.  40 x 40


## sim_15.5

15.4 était tellement tranché que nouveau test: cercle alimentaire: A met ses paramètres comme tous les autres, et maintenant mange H
La situtation est un peu moins nette, les époques de domination se succèdent comme le montrent les cartes qui changent de couleur dominante très vite (au point de laguer sur le motif de sim_15.5.map.5). Les pics aussi s'altèrnent, et pas très étonnament, alternent suivant l'ordre de la chaîne:
rouge puis jaune puis vert puis ciel puis marin puis marron (couleurs du graphiques, correspondant à A, B, C, D, E et G).
Par contre, comment expliquer l'arrêt de ce motif? ((et également pourquoi le tour de F a été sauté)) Car H (gris sur graph) ne s'impose pas comme l'ont fait ces prédecesseurs. Surement à cause de la montée de A ((rouge sur graph)), mais celle-ci est encore plus bizarre: partant de presque rien, et en plus sous la pression de B ((jaune sur graph)), qui alors stagnait car son prédateur s'était fait niqué par sonson ((NB: sonson = 'son' appliqué à au dernier argument)) prédateur. En tout cas, la stagnation finale, s'explique plutôt bien car B, E, et G stagnent à des effectifs plutôt élevés par rapport aux autres, ce qui est cohérent car il n'existe pas de relations entre eux. De même les survivants de D, C, F, H, A stagnent également car ils se mangent entre eux, le peu qu'il reste, donc peu de reproduction. Mais pouvait-on s'attendre à ce qu'ils disparaissent totalement, face aux effectifs importants de B, E, et G? La carte qui bug aurait peut être plus en dire plus sur la disposition géographique.


15.5.1 fait pareil, en un peu moins exagéré

        TypeEspece a = new TypeEspece("A", 40, 0, 1.1, Color.WHITE);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);
	a.addInteraction(h, new Interaction(80, InterType.MANGE));
        species.add(a);

map.  40 x 40



# sim_15.4
Essai avec des evolverate > 1 pour tous. Magré l'artificialité de la chose, c'est plus que concluant: H s'impose très vite comme majoritaire, et pour cause: pas de prédateur.

        TypeEspece a = new TypeEspece("A", 60, 0, 1.1, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 40, 0, 1.1, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 1.1, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 1.1, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 1.1, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 1.1, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 1.1, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 1.1, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);

map.  40 x 40

## sim_15.3
Pareil que 15.2. En fait, uniquement B profite de A. Et comme après, tous les prédateurs ont un evolverate inférieur à 1, ils n'arrivent pas à s'imposer.

        TypeEspece a = new TypeEspece("A", 60, 0, 1.2, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 40, 0, 0.8, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 40, 0, 0.8, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 40, 0, 0.8, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 40, 0, 0.8, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 40, 0, 0.8, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 40, 0, 0.8, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 40, 0, 0.8, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);


map:	 40 x 40


## sim_15.2
Pareil que la 15.1, même avec ces paramètres

        TypeEspece a = new TypeEspece("A", 30, 0, 1.2, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 12, 0, 0.7, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 12, 0, 0.7, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 12, 0, 0.7, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 12, 0, 0.7, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 12, 0, 0.7, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 12, 0, 0.7, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 12, 0, 0.7, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);

map:	 40 x 40


## sim_15.1
Taux trop bas sur la reproduction: pas d'effet de chaîne car tout est tassé dès la 3e espèce, C.

        TypeEspece a = new TypeEspece("A", 10, 0, 1.2, Color.WHITE);
        species.add(a);
        TypeEspece b = new TypeEspece("B", 4, 0, 0.6, Color.BLUEVIOLET);
        b.addInteraction(a, new Interaction(80, InterType.MANGE));
        species.add(b);
        TypeEspece c = new TypeEspece("C", 4, 0, 0.6, Color.ORANGE);
        c.addInteraction(b, new Interaction(80, InterType.MANGE));
        species.add(c);
        TypeEspece d = new TypeEspece("D", 4, 0, 0.6, Color.RED);
        d.addInteraction(c, new Interaction(80, InterType.MANGE));
        species.add(d);
        TypeEspece e = new TypeEspece("E", 4, 0, 0.6, Color.GREEN);
        e.addInteraction(d, new Interaction(80, InterType.MANGE));
        species.add(e);
        TypeEspece f = new TypeEspece("F", 4, 0, 0.6, Color.BLUE);
        f.addInteraction(e, new Interaction(80, InterType.MANGE));
        species.add(f);
        TypeEspece g = new TypeEspece("G", 4, 0, 0.6, Color.PINK);
        g.addInteraction(f, new Interaction(80, InterType.MANGE));
        species.add(g);
        TypeEspece h = new TypeEspece("H", 4, 0, 0.6, Color.YELLOW);
        h.addInteraction(g, new Interaction(80, InterType.MANGE));
        species.add(h);

map: 40 x 40

### sim 14.x: étude générale sur un graphe de relation:
 b → l
↓↑  ↓↑
  r     r

## sim_14.6

        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.2, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 40, 0, 0.4, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(90, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 40, 0, 0.4, Color.RED);
        lynx.addInteraction(lapin, new Interaction(50, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(90, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(50, InterType.MANGE));
        species.add(renard);

map: 40 x 40

## sim_14.5

        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.3, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 10, 0, 0.4, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 10, 0, 0.4, Color.RED);
        lynx.addInteraction(lapin, new Interaction(60, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(80, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(60, InterType.MANGE));
        species.add(renard);

map: 40 x 40

## sim_14.4
Dans cette simulation, les probabilités d'interractions faibles pour renard et lynx pour les deux espèces qu'ils prédatent, ralentissent les rencontres, et du coup lisses les courbes au court du temps. C'est ainsi une simulation plus réaliste, durant plus sur la longueur et moins soumise à de petites vagaries pouvant faire basculer les courbes en, par exemple, faisant qu'une espèce disparaissent complètement. C'est également cohérent avec les équations de lotka-volterra (voir lotkwa/runge-kutta pour les graphes): plus les paramètres sont ajustés de sorte à limiter reproduction et prédation, la période de courbe s'étend dans le temps.

    public void initSpeciesData() {
        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.6, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 4, 0, 0.6, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(30, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 4, 0, 0.6, Color.RED);
        lynx.addInteraction(lapin, new Interaction(30, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(20, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(20, InterType.MANGE));
        species.add(renard);

map: 40 x 40


## sim_14.3
    public void initSpeciesData() {
        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.6, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 4, 0, 0.6, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 4, 0, 0.6, Color.RED);
        lynx.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(75, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(75, InterType.MANGE));
        species.add(renard);

map: 40 x 40

## sim_14.3
Pour l'espèce ayant des taux d'interractions faibles (ici lynx): disparition. Après, joute habituelle entre celle survivante et sa proie.

    public void initSpeciesData() {
        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.6, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 4, 0, 0.6, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 4, 0, 0.6, Color.RED);
        lynx.addInteraction(lapin, new Interaction(30, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(20, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(75, InterType.MANGE));
        species.add(renard);

map: 40 x 40

## sim_14.2
Lapins se reproduisent trop vite: disparition

    public void initSpeciesData() {
        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.6, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 4, 0, 0.6, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 4, 0, 0.6, Color.RED);
        lynx.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(75, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(75, InterType.MANGE));
        species.add(renard);

map: 40 x 40

## sim_14.1
Même avec une reproduction plutôt faible (1.2), les lapins disparaissent.

    public void initSpeciesData() {
        TypeEspece lapin = new TypeEspece("Lapins", 10, 0, 1.6, Color.WHITE);
        species.add(lapin);
        TypeEspece renard = new TypeEspece("Renards", 4, 0, 0.6, Color.BLUEVIOLET);
        renard.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        TypeEspece lynx = new TypeEspece("Lynxs", 4, 0, 0.6, Color.RED);
        lynx.addInteraction(lapin, new Interaction(80, InterType.MANGE));
        lynx.addInteraction(renard, new Interaction(75, InterType.MANGE));
        species.add(lynx);
        renard.addInteraction(lynx, new Interaction(75, InterType.MANGE));
        species.add(renard);

map: 40 x 40


### sim 13.x: étude générale sur un graphe de relation:
 b → r
↓↑
 d
________________
sim_13.4

r 1.2 10
d 0.9 2
b 0.6 4

d M 70% b
b M_75%_d
b_M_80%_r

map:_10_x_10

Gros raté
________________
sim_13.3

r 1.2 10
d 0.9 2
b 0.6 4

d M 70% b
b M_75%_d
b_M_80%_r

map:_10_x_100

Etude sur une carte rectangulaire très étendue: globalement pareil que 13.2, mais prend plus de temps car rabbits ont plus de place pour se reproduire, et bobcat peuvent moins rapidement manger.
________________
sim_13.2

r 1.2 10
d 0.9 2
b 0.6 4

d M 70% b
b M_75%_d
b_M_80%_r

map:_10_x_10

commentaire:
bobcat: dépend de rabbit et de deer. sauf que pas assez de deers au début, mais par contre plus et plus vite de rabbits, qui ont un evolvrate positif, donc peuvent augmenter sans tuer les autres. Comme rabbit augmente, bobcat augmente (croisement des courbes). Et comme bobcat augmente, deer augmente et bobcat diminue (croisement des courbes). À présent, deer n'a plus de prédateur, donc reste à un pallier. La diminution de bobcat, à présent pourchasser par plus de deers, fait que rabbit, qui n'interragit pas avec deer, peut augmenter beaucoup plus vite: peu de prédateur, et même un gardien contre bobcat qui le mange. Cependant, vu la petitesse de la carte (10 par 10), bobcat, n'étant pas disparu, finit par rencontré rabbit malgré deer, et donc de se reproduire. Mais la taille de la carte joue là encore: bobcat peut se goinfrer, se reproduire et occuper l'espace qu'occupait sa proie rabbit. Ainsi, rabbit voit sa population chuté, et même, dans cette simulation, disparaître. La montée de bobcat permet â deer de s'accroître aussi. Cependant, la disparition de rabbit laisse la place à un combt entre deer et bobcat, se mangeant mutuellement. Ils peuvent ainsi occuper tous l'espace et se livrer à leur combat. Combat qui manifestement semble vouloir durer, ce qui n'est pas très étonnant vu les probablités d'interractions que ces deux espèces partagent: bobcat MANGE deer à 75% et deer bobcat à 70%. Ainsi, leur appétit étant égaux, aucune des espèces ne prendra surement le dessus. La relation de dépendance qui déjà pu être observé au temps où rabbit était encore présent se retrouve ici dans une forme plus exagérée et artificielle. Peut ainsi être observé que les courbes de bobcat et deer sont plutôt symétriques: un pic de l'un correspond â un creux de l'autre. Même si cette situation n'étant pas cohérente par rapport â la réalité car elle suppose le non-épuisement des ressources du milieu et surtout des combattants, elle montre bien les dépendances entre deux espèces entrelacées, qui se voit d'autant plus sur la carte pendant le déroulement de la simulation: un maëlstrom des couleurs de deer et bobcat (voir sim_13.2.map.png)

________________
sim_13.1

r 1.2 10
d 0.9 2
b 0.6 4

d M 70% b
b M_75%_d
b_M_80%_r

map:_10_x_10
__________________
sim_013

r 1.2 10
d 0.9 2
b 0.6 4

d M 70% b
b M_75%_d
b_M_80%_r

map:_40_x_40

__________________
rabbit: 1.2 10
deers: 0.9 10
bobcat: 0.4 4

bobcat mange 60% rabbit
            mange 75% deers
deers mange 70% bobcat
map =
___________________


